
@model IEnumerable<Bitcraft.ResourceFinder.Web.Models.Resource>
@{
    ViewData["Title"] = "Browse Resources";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var total = (int)(ViewBag.Total ?? 0);
    var page = (int)(ViewBag.Page ?? 1);
    var pageSize = (int)(ViewBag.PageSize ?? 20);
    var pages = (total + pageSize - 1) / pageSize;
    // ? Avoid CS8602 by coalescing ViewBag casts
    var types = (ViewBag.Types as List<Bitcraft.ResourceFinder.Web.Models.TypeItem>) ?? new();
    var biomes = (ViewBag.Biomes as List<Bitcraft.ResourceFinder.Web.Models.Biome>) ?? new();
    string? q = ViewBag.Query; int? tier = ViewBag.Tier; Guid? type = ViewBag.Type; Guid? biome = ViewBag.Biome; string? status = ViewBag.Status;
}
<div class="card p-3 mb-3">
  <form class="row g-2" method="get">
    <div class="col-md-3">
      <input name="q" value="@q" class="form-control" placeholder="Search by name" />
    </div>
    <div class="col-md-2">
      <select class="form-select" name="tier">
        <option value="">Tier</option>
        @for (int i = 1; i <= 10; i++) {
            <option value="@i" selected="@(tier==i)">@i</option>
        }
      </select>
    </div>
    <div class="col-md-3">
      <select class="form-select" name="type">
        <option value="">Type</option>
        @foreach (var t in types) {
            <option value="@t.Id" selected="@(type==t.Id)">@t.Name</option>
        }
      </select>
    </div>
    <div class="col-md-3">
      <select class="form-select" name="biome">
        <option value="">Biome</option>
        @foreach (var b in biomes) {
            <option value="@b.Id" selected="@(biome==b.Id)">@b.Name</option>
        }
      </select>
    </div>
    <div class="col-md-1">
      <select class="form-select" name="status">
        <option value="">Any</option>
        <option value="confirmed" selected="@(status=="confirmed")">Confirmed</option>
        <option value="unconfirmed" selected="@(status=="unconfirmed")">Unconfirmed</option>
      </select>
    </div>
    <div class="col-md-12">
      <button class="btn btn-primary">Apply</button>
      <a class="btn btn-secondary" href="/resources">Reset</a>
    </div>
  </form>
</div>

<div class="row row-cols-2 row-cols-sm-3 row-cols-lg-4 row-cols-xl-6 g-2 card-grid">
    @foreach (var r in Model)
    {
        <div class="col">
            <div class="card h-100 resource-card">
                @{
                    // Build safe URLs with fallbacks
                    var src256 = Url.Content(r.Img256Url ?? "~/images/missing-256.webp");
                    var src512 = Url.Content(r.Img512Url ?? "~/images/missing-512.webp");
                }
                <img src="@src256"
                     srcset="@src512 2x"
                     class="card-img-top"
                     alt="@r.Name"
                     loading="lazy"
                     decoding="async" />

                <div class="card-body">
                    <div class="title">@r.Name</div>
                    <div class="meta">T@(r.Tier) &bull; @(r.Type?.Name ?? "—") &bull; @(r.Biome?.Name ?? "—")</div>


                    @if (r.Status == Bitcraft.ResourceFinder.Web.Models.ResourceStatus.Unconfirmed)
                    {
                        <span class="badge badge-unconfirmed">Unconfirmed</span>
                    }
                    else
                    {
                        <span class="badge badge-confirmed">Confirmed</span>
                    }
                </div>
            </div>
        </div>
    }
</div>


@if (pages > 1) {
  <nav class="mt-3">
    <ul class="pagination">
      @for (int p = 1; p <= pages; p++) {
        <li class="page-item @(p==page? "active":"")">
          <a class="page-link" href="@Url.Action("Index", new { q, tier, type, biome, status, page = p })">@p</a>
        </li>
      }
    </ul>
  </nav>
}
