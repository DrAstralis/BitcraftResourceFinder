@model IEnumerable<Bitcraft.ResourceFinder.Web.Models.Resource>
@{
    ViewData["Title"] = "Admin — Review";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // paging
    var page = (int)ViewBag.Page;
    var pageSize = (int)ViewBag.PageSize;
    var total = (int)ViewBag.Total;
    var pages = (total + pageSize - 1) / pageSize;

    // filters
    string q = (string)ViewBag.Query ?? "";
    int? selTier = (int?)ViewBag.Tier;
    Guid? selType = (Guid?)ViewBag.Type;
    Guid? selBiome = (Guid?)ViewBag.Biome;
    string selStatus = (string)ViewBag.Status ?? "";

    var types = (IEnumerable<Bitcraft.ResourceFinder.Web.Models.TypeItem>)ViewBag.Types ?? Enumerable.Empty<Bitcraft.ResourceFinder.Web.Models.TypeItem>();
    var biomes = (IEnumerable<Bitcraft.ResourceFinder.Web.Models.Biome>)ViewBag.Biomes ?? Enumerable.Empty<Bitcraft.ResourceFinder.Web.Models.Biome>();
}


<h3>Admin — Review</h3>

<form method="get" class="row g-2 align-items-end mb-3">
    <div class="col-md-4">
        <label class="form-label">Search</label>
        <input name="q" class="form-control" placeholder="Name…" value="@q" />
    </div>

    <div class="col-md-2">
        <label class="form-label">Tier</label>
        <select name="tier" class="form-select">
            <option value="">Any</option>
            @for (var t = 1; t <= 10; t++)
            {
                <option value="@t" selected="@(selTier == t ? "selected" : null)">Tier @t</option>
            }
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Type</label>
        <select name="type" class="form-select">
            <option value="">Any</option>
            @foreach (var t in types)
            {
                <option value="@t.Id" selected="@(selType == t.Id ? "selected" : null)">@t.Name</option>
            }
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Biome</label>
        <select name="biome" class="form-select">
            <option value="">Any</option>
            @foreach (var b in biomes)
            {
                <option value="@b.Id" selected="@(selBiome == b.Id ? "selected" : null)">@b.Name</option>
            }
        </select>
    </div>

    <div class="col-md-3">
        <label class="form-label">Status</label>
        <select name="status" class="form-select">
            <option value="">Any</option>
            <option value="confirmed" selected="@(string.Equals(selStatus, "confirmed", StringComparison.OrdinalIgnoreCase) ? "selected" : null)">Confirmed</option>
            <option value="unconfirmed" selected="@(string.Equals(selStatus, "unconfirmed", StringComparison.OrdinalIgnoreCase) ? "selected" : null)">Unconfirmed</option>
        </select>
    </div>

    <div class="col-md-3 d-flex gap-2">
        <button class="btn btn-primary" type="submit">Filter</button>
        <a class="btn btn-outline-secondary" href="@Url.Action("Index", "Admin")">Clear</a>
    </div>
</form>

    <div class="card mb-4">
        <div class="card-header d-flex align-items-center justify-content-between">
            <strong>JSON Import</strong>
            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#jsonImportCollapse" aria-expanded="false" aria-controls="jsonImportCollapse">
                Toggle
            </button>
        </div>

        <div id="jsonImportCollapse" class="collapse">
            <div class="card-body">
                <label class="form-label">Example JSON</label>
                <pre class="bg-light p-3 rounded small mb-3" style="max-height:220px;overflow:auto">@Html.Raw(@"[
    { ""name"": ""Lorem Ore"", ""tier"": 3, ""type"": ""Ore Vein"", ""biome"": ""Grasslands"" },
    { ""name"": ""Ipsum Flower"", ""tier"": 1, ""type"": ""Flower"", ""biome"": ""Calm Forest"" }
]")</pre>

                <!-- Unified inline error area (used for client + server validation) -->
                <div id="jsonImportErrors" class="alert alert-danger d-none position-relative" role="alert">
                    <button type="button" class="btn-close position-absolute top-0 end-0 m-2" aria-label="Close"
                            onclick="document.getElementById('jsonImportErrors').classList.add('d-none')"></button>
                    <div class="fw-semibold mb-1">Import errors</div>
                    <ul id="jsonImportErrorsList" class="mb-0"></ul>
                </div>

                <label for="jsonImportText" class="form-label">Paste JSON</label>
                <textarea id="jsonImportText" class="form-control mb-3" rows="8" placeholder='[ { "name": "...", "tier": 1, "type": "Ore Vein", "biome": "Grasslands" } ]'></textarea>

                <div class="d-flex gap-2">
                    <button id="jsonImportSubmit" class="btn btn-primary" type="button">Submit</button>
                    <small class="text-muted align-self-center">Max 256 KB, up to 200 items.</small>
                </div>

                <!-- Optional success toast inline -->
                <div id="jsonImportSuccess" class="alert alert-success d-none mt-3">Imported successfully.</div>
            </div>
        </div>
    </div>

@section Scripts {
        <script>
            (function(){
              const TEXTAREA_ID = 'jsonImportText';
              const ERR_ID = 'jsonImportErrors';
              const ERR_LIST_ID = 'jsonImportErrorsList';
              const OK_ID = 'jsonImportSuccess';
              const MAX_BYTES = 256 * 1024;     // 256 KB
              const MAX_ITEMS = 200;

              function showErrors(messages){
                const box = document.getElementById(ERR_ID);
                const ul = document.getElementById(ERR_LIST_ID);
                ul.innerHTML = '';
                (messages || []).forEach(m => {
                  const li = document.createElement('li');
                  li.textContent = m;
                  ul.appendChild(li);
                });
                box.classList.toggle('d-none', !(messages && messages.length));
              }

              function hideErrors(){ document.getElementById(ERR_ID).classList.add('d-none'); }
              function showOk(msg){
                const ok = document.getElementById(OK_ID);
                ok.textContent = msg || 'Imported successfully.';
                ok.classList.remove('d-none');
                setTimeout(()=> ok.classList.add('d-none'), 4000);
              }

              // crude client-side canonicalize (match server’s spirit)
              function canon(s){
                return (s || '')
                  .normalize('NFD').replace(/[\u0300-\u036f]/g,'')
                  .toLowerCase().replace(/[^a-z0-9\s-]/g,'')
                  .trim().replace(/\s+/g,' ');
              }

              function validateClient(jsonText){
                const errs = [];
                // size
                const bytes = new Blob([jsonText]).size;
                if (bytes === 0) errs.push('Empty payload.');
                if (bytes > MAX_BYTES) errs.push(`Payload too large (${bytes} bytes). Max ${MAX_BYTES} bytes.`);

                let parsed = null;
                if (!errs.length){
                  try { parsed = JSON.parse(jsonText); }
                  catch(e){ errs.push('Invalid JSON syntax.'); }
                }
                if (errs.length) return { ok:false, errors: errs };

                if (!Array.isArray(parsed)) return { ok:false, errors:['Root must be an array of objects.'] };
                if (parsed.length === 0) return { ok:false, errors:['No items provided.'] };
                if (parsed.length > MAX_ITEMS) return { ok:false, errors:[`Too many items (${parsed.length}). Max ${MAX_ITEMS}.`] };

                // per-item checks + intra-batch duplicates by canonical name
                const seen = new Set();
                const itemErrs = [];
                parsed.forEach((it, i) => {
                  const ctx = `Item ${i+1}`;
                  if (typeof it !== 'object' || it === null){ itemErrs.push(`${ctx}: must be an object.`); return; }
                  const { name, tier, type, biome } = it;
                  if (!name || typeof name !== 'string' || !name.trim()) itemErrs.push(`${ctx}: 'name' required.`);
                  if (name && name.length > 80) itemErrs.push(`${ctx}: 'name' too long (max 80).`);
                  if (typeof tier !== 'number' || !Number.isInteger(tier) || tier < 1 || tier > 10) itemErrs.push(`${ctx}: 'tier' must be 1–10.`);
                  if (!type || typeof type !== 'string') itemErrs.push(`${ctx}: 'type' required (name or slug).`);
                  if (!biome || typeof biome !== 'string') itemErrs.push(`${ctx}: 'biome' required (name or slug).`);

                          // batch duplicate by canonical (name + biome)
        const nameKey = canon(name || '');
        const biomeKey = canon(biome || '');
        const key = nameKey && biomeKey ? `${nameKey}|${biomeKey}` : '';
                  if (key){
  if (seen.has(key)) itemErrs.push(`${ctx}: duplicate 'name+biome' within payload (${name} - ${biome}).`);
  seen.add(key);
}
                });

                if (itemErrs.length) return { ok:false, errors:itemErrs };

                return { ok:true, items: parsed };
              }

              async function submit(){
                hideErrors();
                const text = document.getElementById(TEXTAREA_ID).value || '';
                const check = validateClient(text);
                if (!check.ok){ showErrors(check.errors); return; }

                try {
                          const resp = await fetch('@Url.Content("~/api/resources/bulk-import")', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ items: check.items })
        });

                  const data = await resp.json().catch(()=>({ ok:false, errors:['Server returned non-JSON.'] }));
                  // Always re-use same error element for server-side issues
                  if (!resp.ok || !data.ok){
                    const errs = (data && (data.errors || [])).slice();
                    // Include per-item rejects as lines
                    (data.rejected || []).forEach(r => {
                      (r.reasons || []).forEach(reason => errs.push(`Item ${r.index+1}: ${reason}`));
                    });
                    showErrors(errs.length ? errs : ['Import failed.']);
                    return;
                  }

                  showOk(`Accepted ${data.accepted} item(s). Rejected ${data.rejected.length}.`);
                  // Optional: clear textarea when fully clean
                  if ((data.rejected || []).length === 0) document.getElementById(TEXTAREA_ID).value = '';
                } catch (e){
                  showErrors(['Network or server error.']);
                }
              }

              document.getElementById('jsonImportSubmit').addEventListener('click', submit);
            })();
        </script>
}

<table class="table table-striped">
  <thead>
        <tr><th>Name</th><th>Tier</th><th>Type</th><th>Biome</th><th>Has Image</th><th>Status</th><th></th></tr>
  </thead>
  <tbody>
        @foreach (var r in Model)
        {
            <tr>
                <td>@r.Name</td>
                <td>@r.Tier</td>
                <td>@r.Type?.Name</td>
                <td>@r.Biome?.Name</td>
                <td>
                    @{
                        var hasImage = !string.IsNullOrWhiteSpace(r.Img256Url) || !string.IsNullOrWhiteSpace(r.Img512Url);

                    }
                    <span class="badge @(hasImage ? "bg-success" : "bg-secondary")">@(hasImage ? "Yes" : "No")</span>

                </td>
                <td>@r.Status</td>
                <td class="text-end">
                    <!-- Confirm / Unconfirm -->
                    <form method="post" action="~/admin/resources/@r.Id/status" class="d-inline">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="status" value="@(r.Status == Bitcraft.ResourceFinder.Web.Models.ResourceStatus.Unconfirmed ? "confirmed" : "unconfirmed")" />
                        <input type="hidden" name="returnUrl" value="@(Context.Request.PathBase + Context.Request.Path + Context.Request.QueryString)" />
                        <button class="btn btn-sm btn-success">
                            @(r.Status == Bitcraft.ResourceFinder.Web.Models.ResourceStatus.Unconfirmed ? "Confirm" : "Unconfirm")
                        </button>
                    </form>

                    <!-- Edit -->
                    <a class="btn btn-sm btn-primary"
                       href="@Url.Action("Edit", "Admin", new { id = r.Id, returnUrl = Context.Request.PathBase + Context.Request.Path + Context.Request.QueryString })">
                        Edit
                    </a>

                    <!-- Delete -->
                    <form method="post" action="~/admin/resources/@r.Id/delete" class="d-inline" onsubmit="return confirm('Delete this resource?');">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="returnUrl" value="@(Context.Request.PathBase + Context.Request.Path + Context.Request.QueryString)" />
                        <button class="btn btn-sm btn-danger">Delete</button>
                    </form>
                </td>

    </tr>
  }
  </tbody>
</table>

@if (pages > 1)
{
    <nav class="mt-3">
        <ul class="pagination">
            @for (int p = 1; p <= pages; p++)
            {
                <li class="page-item @(p == page ? "active" : "")">
                    <a class="page-link"
                       href="@Url.Action("Index", new { q = q, tier = selTier, type = selType, biome = selBiome, status = selStatus, page = p })">@p</a>
                </li>
            }
        </ul>
    </nav>
}
