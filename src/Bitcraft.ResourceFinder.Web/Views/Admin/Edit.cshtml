
@model Bitcraft.ResourceFinder.Web.Models.Resource
@{
    ViewData["Title"] = "Edit Resource";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var types = ViewBag.Types as List<Bitcraft.ResourceFinder.Web.Models.TypeItem>;
    var biomes = ViewBag.Biomes as List<Bitcraft.ResourceFinder.Web.Models.Biome>;
}
@{
    var reports = ViewBag.Reports as List<Bitcraft.ResourceFinder.Web.Models.Report>;
    var pending = ViewBag.Pending as List<Bitcraft.ResourceFinder.Web.Models.PendingImage>;
}

@if (reports != null && reports.Count > 0)
{
    <div class="alert alert-danger">
        <div class="d-flex align-items-center justify-content-between">
            <strong>Reports</strong>
        </div>
        <ul class="mb-2">
            @foreach (var rep in reports)
            {
                <li>
                    <span class="badge bg-danger me-2">@rep.Target</span>
                    <span class="badge bg-secondary me-2">@rep.Reason</span>
                    @if (!string.IsNullOrWhiteSpace(rep.Notes))
                    {
                        @rep.Notes
                    }
                    <form method="post" action="@Url.Content($"~/admin/reports/{rep.Id}/close")" class="d-inline ms-2">
                                               @Html.AntiForgeryToken()
                        <button class="btn btn-sm btn-outline-dark">Mark resolved</button>
                    </form>
                    @if (rep.Target == Bitcraft.ResourceFinder.Web.Models.ReportTargetType.AcceptedImage && !string.IsNullOrEmpty(Model.Img256Url))
                    {
                        <form method="post" action="@Url.Content($"~/admin/resources/{Model.Id}/remove-accepted-image")" class="d-inline ms-2"
                              onsubmit="return confirm('Remove the accepted image?');">
                            @Html.AntiForgeryToken()
                            <button class="btn btn-sm btn-outline-danger">Remove accepted image</button>
                        </form>
                    }
                </li>
            }
        </ul>
    </div>
}

@if (pending != null && pending.Count > 0)
{
    <div class="card p-3 mb-3 border-warning">
        <div class="d-flex align-items-center justify-content-between mb-2">
            <h5 class="m-0">Pending Images (@pending.Count)</h5>
            <form method="post" action="@Url.Content($"~/admin/resources/{Model.Id}/purge-pending")" onsubmit="return confirm('Purge all pending images?');">
                @Html.AntiForgeryToken()
                <button class="btn btn-sm btn-outline-danger">Purge all</button>
            </form>
        </div>
        <div class="row g-3">
            @foreach (var p in pending)
            {
                <div class="col-auto text-center">
                    <img src="@Url.Content(p.Img256Url)" width="128" height="128" class="rounded border mb-2" />
                    <div>
                        <form method="post" action="@Url.Content($"~/admin/resources/{Model.Id}/accept-pending/{p.Id}")" class="d-inline">
                            @Html.AntiForgeryToken()
                            <button class="btn btn-sm btn-primary">Accept</button>
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
}

<h3>Edit Resource</h3>
<form method="post" enctype="multipart/form-data">
    @Html.AntiForgeryToken()

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            @Html.ValidationSummary(excludePropertyErrors: true)
        </div>
    }

    <div class="row g-3">
        <div class="col-md-2">
            <label class="form-label">Tier</label>
            <select class="form-select" name="tier" required>
                @for (int i = 1; i <= 10; i++)
                {
                    <option value="@i" selected="@(Model.Tier == i)">@i</option>
                }
            </select>
        </div>

        <div class="col-md-5">
            <label class="form-label">Type</label>
            <select class="form-select" name="typeId" required>
                @foreach (var t in (List<Bitcraft.ResourceFinder.Web.Models.TypeItem>)ViewBag.Types)
                {
                    <option value="@t.Id" selected="@(Model.TypeId == t.Id)">@t.Name</option>
                }
            </select>
        </div>

        <div class="col-md-5">
            <label class="form-label">Biome</label>
            <select class="form-select" name="biomeId" required>
                @foreach (var b in (List<Bitcraft.ResourceFinder.Web.Models.Biome>)ViewBag.Biomes)
                {
                    <option value="@b.Id" selected="@(Model.BiomeId == b.Id)">@b.Name</option>
                }
            </select>
        </div>

        <div class="col-md-12">
            <label class="form-label">Name</label>
            <input class="form-control" name="name" value="@Model.Name" required maxlength="80" />
        </div>

        <!-- Image section -->
        <div class="col-md-12">
            <label class="form-label d-block">Image</label>

            @if (!string.IsNullOrWhiteSpace(Model.Img256Url) || !string.IsNullOrWhiteSpace(Model.Img512Url))
            {

                <div class="mb-2">
                    @{
                        // Works whether these are DateTime or DateTime?
                        var updated = Convert.ToDateTime(Model.UpdatedAt);
                        var created = Convert.ToDateTime(Model.CreatedAt);
                        var dt = (updated > created) ? updated : created; // pick the newer one
                        var ver = dt.ToFileTimeUtc();

                        var imgUrl = Model.Img256Url ?? Model.Img512Url ?? "~/images/missing-256.png";
                        var currentImg = Url.Content(imgUrl + "?v=" + ver);
                    }
                    <img src="@currentImg"
                         alt="Current image"
                         style="max-width:256px; height:auto; border-radius:8px;" />
                </div>
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="removeImage" name="removeImage" value="true" />
                    <label class="form-check-label" for="removeImage">Remove existing image</label>
                </div>
            }

            <!-- Image cropper (512×512 PNG) -->
            <input type="hidden" name="returnUrl" value="@ViewBag.ReturnUrl" />
            <div class="image-crop-512" data-field="file" data-proxy-url="@Url.Content("~/image-proxy?url=")"></div>
        </div>

        <div class="col-md-12">
            <button class="btn btn-primary">Save</button>
            <a class="btn btn-secondary" href="@(ViewBag.ReturnUrl ?? Url.Content("~/admin"))">Cancel</a>
        </div>
    </div>
</form>

@section Scripts {
    <script src="~/js/image-crop-512.js"></script>
    <script>
        // Auto-detects the nearest <form>; no id needed
        initImageCrop512('.image-crop-512');
    </script>
}